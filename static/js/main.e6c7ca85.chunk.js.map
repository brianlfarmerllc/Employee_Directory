{"version":3,"sources":["components/Header.js","components/Input.js","components/Trowe.js","components/Table.js","api/Api.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Input","props","onChange","handleChange","value","search","name","type","placeholder","Trowe","alt","src","image","phone","email","location","Table","filteredBy","results","filter","employee","fullname","first","last","citystate","city","state","JSON","stringify","includes","scope","onClick","sortName","sortLocation","map","result","key","id","picture","thumbnail","fetch","then","response","json","Main","searchEmployees","API","res","setState","catch","err","console","log","e","target","handleSortName","event","preventDefault","sortedResult","sort","a","z","localeCompare","undefined","caseFirst","handleSortLocation","this","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e6c7ca85.chunk.js","sourcesContent":["import React from 'react';\nfunction Header() {\n    return (\n        <header className=\"container-fluid header\">\n            <div className=\"row\">\n                <div className=\"col-12 mt-3\">\n                    <h1>Employee Directory</h1>\n                    <p>Click on carrots to filter by heading or use the search box to narrow your results</p>\n                </div>\n            </div>\n        </header>\n    );\n}\n\nexport default Header","import React from 'react';\n\nfunction Input(props) {\n    return (\n        <div className=\"container-fluid input\">\n            <div className=\"row justify-content-center\">\n                <form className=\"form-inline\">\n                    <div className=\"col-12 mt-3\">\n                        <input\n                            onChange={props.handleChange}\n                            value={props.search}\n                            name=\"search\"\n                            className=\"form-control\"\n                            type=\"text\"\n                            placeholder=\"Search Directory\" />\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default Input","import React from 'react';\n\nfunction Trowe (props) {\n    return (\n        <tr>\n        <td><img alt={props.name} className=\"img-fluid\" src={props.image} /></td>\n        <td>{props.name}</td>\n        <td>{props.phone}</td>\n        <td>{props.email}</td>\n        <td>{props.location}</td>\n        </tr>\n    )\n}\n\nexport default Trowe","import React from 'react';\nimport Trowe from './Trowe'\n\nfunction Table(props) {\n    let search = props.search\n    let results = props.results\n    let filteredBy = results.filter(employee => {\n        employee.fullname = `${employee.name.first} ${employee.name.last}`\n        employee.citystate = `${employee.location.city}, ${employee.location.state}`\n        return JSON.stringify(employee).includes(search)})\n    \n\n    return (\n        <div className=\"container\">\n            <table className=\"table mt-4\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">Image</th>\n                        <th scope=\"col\">Name\n                        <i onClick={props.sortName} \n                        className=\"arrow down\"></i>\n                        </th>\n                        <th scope=\"col\">Phone</th>\n                        <th scope=\"col\">Email\n                        <i onClick={props.sortName} \n                        className=\"arrow down\"></i>\n                        </th>\n                        <th scope=\"col\">Location\n                        <i onClick={props.sortLocation} \n                        className=\"arrow down\"></i>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {filteredBy.map(result => (\n                        <Trowe\n                        key={result.id.value}\n                        name={result.name.first + \" \" + result.name.last}\n                        image={result.picture.thumbnail}\n                        phone={result.phone}\n                        email={result.email}\n                        location={result.location.city + \", \" + result.location.state}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default Table;\n","\n\nexport default {\n  // Gets all users\n  getEmployees: function() {\n    return fetch(\"https://randomuser.me/api/?results=50&nat=us\")\n    .then(response => response.json())\n  }\n};\n\n","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport Input from '../components/Input';\nimport Table from '../components/Table';\nimport API from \"../api/Api\"\n\n\nclass Main extends Component {\n    state = {\n        result: [],\n        search: \"\",\n        sortName: \"\",\n        sortLocation: \"\",\n    };\n\n    componentDidMount() {\n        this.searchEmployees();\n    }\n\n    searchEmployees = () => {\n        API.getEmployees()\n            .then(res => this.setState({ result: res.results }))\n            .catch(err => console.log(err));\n    };\n\n    handleChange = e => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({\n            [name]: value\n        });\n    }\n    \n    handleSortName = event => {\n        event.preventDefault();\n        if (this.state.sortName === \"\") {\n            const currentResult = this.state.result\n            let sortedResult = currentResult.sort((a, z) => { \n                return a.name.first.localeCompare(z.name.first, undefined, { caseFirst: \"upper\" })\n            });\n            this.setState({ result: sortedResult })\n            this.setState({sortName:\"az\"})\n        } else if (this.state.sortName === \"az\"){\n            const currentResult = this.state.result\n            let sortedResult = currentResult.sort((a, z) => { \n                return z.name.first.localeCompare(a.name.first, undefined, { caseFirst: \"upper\" })\n            });\n            this.setState({ result: sortedResult })\n            this.setState({sortName:\"\"})\n        }\n    }\n\n    handleSortLocation = event => {\n        event.preventDefault();\n        if (this.state.sortLocation === \"\") {\n            const currentResult = this.state.result\n            let sortedResult = currentResult.sort((a, z) => { \n                return a.location.state.localeCompare(z.location.state, undefined, { caseFirst: \"upper\" })\n            });\n            this.setState({ result: sortedResult })\n            this.setState({sortLocation:\"az\"})\n        } else if (this.state.sortLocation === \"az\"){\n            const currentResult = this.state.result\n            let sortedResult = currentResult.sort((a, z) => { \n                return z.location.state.localeCompare(a.location.state, undefined, { caseFirst: \"upper\" })\n            });\n            this.setState({ result: sortedResult })\n            this.setState({sortLocation:\"\"})\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Header />\n                <Input\n                search={this.state.search}\n                handleChange={this.handleChange}\n                />\n                <Table\n                sortName={this.handleSortName}\n                sortLocation={this.handleSortLocation}\n                results={this.state.result} \n                search={this.state.search}\n                />\n            </>);\n    }\n\n}\n\nexport default Main;\n\n","import React from 'react';\nimport Main  from './pages/Main';\n\nfunction App() {\n  return (\n    <Main></Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}